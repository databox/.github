name: Build and push image
on:
  workflow_call:
    inputs:
      tag:
        description: 'Tag name'
        required: true
        type: string
      image:
        description: 'Image name'
        required: false
        type: string
      dockerfile:
        description: 'Path to the Dockerfile'
        required: false
        type: string
        default: './Dockerfile'
      build_args:
        description: 'Docker build arguments'
        required: false
        type: string
        default: ''
      artifacts_download:
        description: 'Should download artifacts?'
        required: false
        type: boolean
        default: false
      artifacts_download_name:
          description: 'Artifacts name to download'
          required: false
          type: string
          default: ''
      artifacts_download_path:
        description: 'Artifacts path to download'
        required: false
        type: string
        default: ''
      skip_build:
        description: 'List of platforms to skip build'
        required: false
        type: string
        default: ''
      tag_check_regex:
        description: 'Regex to check tag'
        required: false
        type: string
        default: '^([0-9]+)\.([0-9]+)\.([0-9]+)(-([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*))?(\\+([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*))?$'
      extract_semver_from_tag:
        description: 'Extract semver from tag'
        required: false
        type: boolean
        default: false
      tag_extract_regex:
          description: 'Regex to extract semver from tag'
          required: false
          type: string
          default: '([^@]+)$'
      cdn_artifacts:
        description: 'CDN'
        required: false
        type: boolean
        default: false
      cdn_artifacts_docker_path:
        description: 'CDN assets path'
        required: false
        type: string
        default: ''
      cdn_docker_args:
        description: 'Docker arguments for CDN'
        required: false
        type: string
        default: ''
      cdn_artifacts_s3_path:
        description: 'CDN assets S3 path'
        required: false
        type: string
        default: 'release-assets'
      image_suffix:
        description: 'Image suffix'
        required: false
        type: string
        default: ''
      start_npm:
        description: 'Start npm'
        required: false
        type: boolean
        default: false
jobs:
  # Check tag setisfiy semantic versioning
  tag_check:
    uses: databox/.github/.github/workflows/tag-check.yml@master
    secrets: inherit
    with:
      tag: ${{ inputs.tag }}
      tag_check_regex: ${{ inputs.tag_check_regex }}
      extract_semver_from_tag: ${{ inputs.extract_semver_from_tag }}
      tag_extract_regex: ${{ inputs.tag_extract_regex }}

  # Build image for each platform
  build:
    name: Build ${{ needs.tag_check.outputs.semver }}-${{ matrix.platform }}
    runs-on: databox-${{ matrix.platform }}
    needs:
      - tag_check
    if: needs.tag_check.outputs.match == 'true'
    strategy:
      fail-fast: true
      matrix:
        platform:
          - amd64
          - arm64
    env:
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      IMAGE: ''
      IMAGE_TAG: ''
    steps:
      - name: Determine if build should be skipped
        id: skip-build
        run: |
          if [[ "${{ inputs.skip_build }}" == *"${{ matrix.platform }}"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Build version ${{ needs.tag_check.outputs.semver }} for platform ${{ matrix.platform }}
        run: echo "skip=${{ steps.skip-build.outputs.skip }}; dont skip=${{ !fromJson(steps.skip-build.outputs.skip) }}"

      - name: Checkout repository
        if: ${{ !fromJson(steps.skip-build.outputs.skip) }}
        uses: actions/checkout@v4

      - name: ECR image name
        id: ecr
        if: ${{ !fromJson(steps.skip-build.outputs.skip) }}
        run: |
          image_name=""
          if [[ -z "${{ inputs.image }}" ]]; then
            image_name=$(echo ${{ github.repository }} | awk '{print tolower($0)}' | sed 's|[^/]*/||; s/_/-/g')${{ inputs.image_suffix }}
          else
            image_name=$(echo ${{ inputs.image }} | awk '{print tolower($0)}' | sed 's|[^/]*/||; s/_/-/g')${{ inputs.image_suffix }}
          fi
          echo "IMAGE=$image_name" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ needs.tag_check.outputs.semver }}-${{ matrix.platform }}" >> $GITHUB_ENV
          echo ECR image: $image_name:${{ needs.tag_check.outputs.semver }}-${{ matrix.platform }}

      - name: Create ECR repository if not exists
        if: ${{ !fromJson(steps.skip-build.outputs.skip) }}
        run: |
          aws ecr describe-repositories --repository-names ${{ env.IMAGE }} || aws ecr create-repository --image-scanning-configuration scanOnPush=true --repository-name ${{ env.IMAGE }}

      - name: Configure AWS Credentials
        if: ${{ !fromJson(steps.skip-build.outputs.skip) }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up docker buildx
        if: ${{ !fromJson(steps.skip-build.outputs.skip) }}
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          use: true
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["http://docker-registry.default.svc.cluster.local:5000"]

      - name: Generate docker build args
        if: ${{ !fromJson(steps.skip-build.outputs.skip) }}
        id: docker-build-args
        uses: actions/github-script@v7
        with:
          debug: true
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          result-encoding: string
          script: |
            const defaultArgsString = `
            PACKAGES_READ_TOKEN=${{ secrets.PACKAGES_READ_TOKEN }}
            PACKAGES_READ_USER=${{ secrets.PACKAGES_READ_USER }}
            RSA_PYTHON_MQ_LIB=${{ secrets.RSA_PYTHON_MQ_LIB }}
            BUILD_VERSION=${{ needs.tag_check.outputs.semver }}
            VERSION=${{ needs.tag_check.outputs.semver }}
            RELEASE_TAG=${{ needs.tag_check.outputs.semver }}
            NODE_AUTH_TOKEN=${{ secrets.PACKAGES_READ_TOKEN }}
            PACKAGIST_USERNAME=${{ secrets.PACKAGIST_USERNAME }}
            PACKAGIST_PASSWORD=${{ secrets.PACKAGIST_PASSWORD }}
            GITHUB_API_TOKEN=${{ secrets.PAT_APPROVE_PR }}
            GITHUB_TOKEN=${{ secrets.PAT_APPROVE_PR }}`;

            const argsString = `${{ inputs.build_args }}` + defaultArgsString;
            const args = argsString.split('\n').filter(arg => arg.trim() !== '');
            const result = args.map(arg => `--build-arg ${arg.replace(':', '=')}`).join(' ');

            return result;

      - name: Download artifacts
        if: ${{ (inputs.artifacts_download == true)  &&  (fromJson(steps.skip-build.outputs.skip) == false) }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifacts_download_name }}
          path: ${{ inputs.artifacts_download_path }}
          merge-multiple: true

      - name: Start npm
        if: ${{ (fromJson(steps.skip-build.outputs.skip) == false) && (inputs.start_npm == true) }}
        run: |
          npm set @databox:registry=https://npm.pkg.github.com/databox
          npm set //npm.pkg.github.com/:_authToken=${{ secrets.PACKAGES_READ_TOKEN }}
          npm start

      - name: Docker build and push ${{ env.IMAGE }}:${{ env.IMAGE_TAG }}
        if: ${{ !fromJson(steps.skip-build.outputs.skip) }}
        run: |
          docker buildx build \
            ${{ steps.docker-build-args.outputs.result }} \
            -f ${{ inputs.dockerfile }} \
            -t ${{ env.ECR_REGISTRY }}/${{ env.IMAGE }}:${{ env.IMAGE_TAG }} \
            --cache-from type=s3,name=${{ env.IMAGE }},bucket=${{ secrets.DOCKER_BUILD_CACHE_S3 }},blobs_prefix=${{ env.IMAGE }}/${{ matrix.platform }}/blob/,manifests_prefix=${{ env.IMAGE }}/${{ matrix.platform }}/manifest/,region=${{ secrets.AWS_REGION }},access_key_id=${{ secrets.AWS_ACCESS_KEY }},secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --cache-to type=s3,mode=max,name=${{ env.IMAGE }},bucket=${{ secrets.DOCKER_BUILD_CACHE_S3 }},blobs_prefix=${{ env.IMAGE }}/${{ matrix.platform }}/blob/,manifests_prefix=${{ env.IMAGE }}/${{ matrix.platform }}/manifest/,region=${{ secrets.AWS_REGION }},access_key_id=${{ secrets.AWS_ACCESS_KEY }},secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --progress plain \
            --push \
            --provenance false .

      - name: Save ${{ needs.tag_check.outputs.semver }}-${{ matrix.platform }} tag
        if: ${{ !fromJson(steps.skip-build.outputs.skip) }}
        run: |
          mkdir -p ${{ runner.temp }}/${{ needs.tag_check.outputs.semver }}
          touch ${{ runner.temp }}/${{ needs.tag_check.outputs.semver }}/${{ needs.tag_check.outputs.semver }}-${{ matrix.platform }}

      - name: Upload ${{ needs.tag_check.outputs.semver }}-${{ matrix.platform }} tag to GitHub Actions Artifacts
        if: ${{ !fromJson(steps.skip-build.outputs.skip) }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.tag_check.outputs.semver }}-${{ matrix.platform }}
          path: ${{ runner.temp }}/${{ needs.tag_check.outputs.semver }}
          retention-days: 1

      - name: Extract CDN artifacts from image
        if: ${{ (fromJson(steps.skip-build.outputs.skip) == false) && (inputs.cdn_artifacts == true) }}
        run: |
          mkdir -p ./${{ matrix.platform }}
          docker run --rm -it -d --name temp_container ${{ inputs.cdn_docker_args }} \
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE }}:${{ env.IMAGE_TAG }}
          docker cp temp_container:${{ inputs.cdn_artifacts_docker_path }} ./${{ matrix.platform }}

      - name: Upload CDN artifacts to S3
        if: ${{ (fromJson(steps.skip-build.outputs.skip) == false) && (inputs.cdn_artifacts == true) }}
        run: |
          aws s3 cp ./${{ matrix.platform }} \
          s3://${{ secrets.RELEASE_ARTIFACTS_S3 }}/${{ inputs.cdn_artifacts_s3_path }}/${{ needs.tag_check.outputs.semver }}/${{ matrix.platform }} \
          --recursive --follow-symlinks

    outputs:
      image: ${{ env.IMAGE }}

  # Get built tags
  build_tags:
    name: Get built tags
    runs-on: databox-arm64
    needs:
      - tag_check
      - build
    outputs:
      tags: ${{ steps.read.outputs.files }}
    steps:
      - name: Download release tag from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/${{ needs.tag_check.outputs.semver }}
          pattern: ${{ needs.tag_check.outputs.semver }}-*
          merge-multiple: true

      - name: Read tags
        id: read
        run: |
          DIRECTORY_PATH=${{ runner.temp }}/${{ needs.tag_check.outputs.semver }}
          FILES=$(ls $DIRECTORY_PATH | tr '\n' ' ')
          echo "files=$FILES" >> $GITHUB_OUTPUT

  # Build and push manifest
  manifest:
    uses: databox/.github/.github/workflows/manifest.yml@master
    needs:
      - tag_check
      - build
      - build_tags
    if: needs.tag_check.outputs.match == 'true'
    with:
      image: ${{ needs.build.outputs.image }}
      tag: ${{ needs.tag_check.outputs.semver }}
      additional_tags: ${{ needs.build_tags.outputs.tags }}